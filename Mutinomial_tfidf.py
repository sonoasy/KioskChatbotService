# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mZJhefek9czsC0MpodQ6nRca4zRojSp
"""

#konlpy 설치
#기타 라이브러리 설치

!set -x \
&& pip install konlpy \
&& curl -s https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh | bash -x
import pickle
import numpy as np
import pandas as pd
import nltk
from bs4 import BeautifulSoup
import re
import konlpy

#데이터전처리
#특수기호 제거,형태소 분석, 불용어 제거 
def clean_words(documents):
 
    #특수기호 제거
    for i, document in enumerate(documents):
        document = re.sub(r'[^ ㄱ-ㅣ가-힣]', '', document) #특수기호 제거, 정규 표현식
        documents[i] = document

    #Mecab 활용 형태소 분석
    for i, document in enumerate(documents):
        mecab = konlpy.tag.Mecab()
        clean_words = []
        for word in mecab.pos(document): #어간 추출
            if word[1] in ['NNG', 'VV', 'VA']: #명사, 동사, 형용사
                clean_words.append(word[0])
        document = ' '.join(clean_words)
        documents[i] = document

    #텍불용어 제거
    df = pd.read_csv('https://raw.githubusercontent.com/cranberryai/todak_todak_python/master/machine_learning_text/clean_korean_documents/korean_stopwords.txt', header=None)
    df[0] = df[0].apply(lambda x: x.strip())
    stopwords = df[0].to_numpy()
    nltk.download('punkt')
    for i, document in enumerate(documents):
        clean_words = [] 
        for word in nltk.tokenize.word_tokenize(document): 
            if word not in stopwords: #불용어 제거
                clean_words.append(word)
        documents[i] = ' '.join(clean_words)  

    return documents

#학습 데이터 추가 
#학습데이터가 많아지면 문서 형태로 가져올수 있음(추가 예정)
x_data = np.array([
    #계산 인텐트
    '계산 할게요',
    '현금 결제할게요',
    '카드로 계산 결제할게요',
    '계산 해주세요',
    '결제요',
    '카드 되나요?',
    '결제 해주세요',
    '얼마에요',
    '결제 어떻게 하나요',
    '쿠폰 결제',
     #주문 인텐트',
    '사이드 선택할게요',
    '주문이요',
    '햄버거 2개 주문 할게요',
    '햄버거 콜라 주문이요?',
    '햄버거 치즈버거로 주문할게요?',
    '주문 어떻게 하나요?',
    '메뉴 선택할게요',
    '주문 방법',
    '주문 하고 싶은데요',
    '주문 가능 한가요?',
    #햄버거 메뉴 안내 인텐트
    '햄버거 정보 설명해주세요',
    '햄버거 종류 알려주세요',
    '햄버거 신 메뉴 보여주세요',
    '햄버거는 뭐가 있나요',
    '햄버거 신 메뉴',
    '햄버거 먹고 싶어요',
    '제일 잘 나가는 버거가 뭐에요?',
    'hamburger',
    '어떤 버거가 맛있나요?',
    '햄버거 먹을래요',
    #음료 메뉴 안내 인텐트
     '음료 추천해주세요',
     '음료 주문할게요',
     '음료수 뭐 있어요?',
     '따뜻한 차 있나요?',
     '탄산 없는 거 먹고 싶어요',
     '시원한 거 먹고 싶어요',
     '마실 거 어떤거 있나요?',
     '음료',
     '목 마른데',
     '제로 칼로리 있나요?',
    #매장 포장 인텐트 
    '매장',
    '포장이요',
    '태아크 아웃이요',
    '여기서 먹고 갈게요',
    '매장에서 먹을게요',
    '싸갈게요',
    '먹고 갈게요',
    '포장 안해요',
    '포장해 주세요',
    '가지고 갈게요',
    #주문취소 인텐트
    '주문 취소 할게요',
    '주문 삭제',
    '버거 취소할게요',
    '주문한 거 취소할 수 있나요?',
    '음료 안 먹을래요',
    '취소',
    '버거 안 먹을래요',
    '상품 취소요',
    '취소하고 싶은데',
    '삭제 가능할까요?',
    #상품 변경 인텐트
    '변경',
    '종류 바꿀게요',
    '개수 변경할게요',
    '다시 주문할게요',
    '주문 바꾸고 싶은데요',
    '개수 늘리고 싶은데',
    '다른 음료로 할게요',
    '다른 버거로 할게요',
    '상품 변경 할게요',
    '다른 걸로 주문할게요',
    #포인트 적립 인텐트
    '포인트',
    '적립할게요',
    '적립 안해요',
    '포인트 적립해주세요',
    '적립 필요 없어요',
    '포인트 할게요',
    '적립해주세요',
    '적립하지 않습니다',
    '적립',
    '포인트 적립',
    #음성인식/키오스크 사용법
    '음성인식 사용 방법 알려주세요',
    '카드 결제 투입 위치',
    '이 키오스크 어떻게 사용하나요',
    '사용 단계 알려주세요',
    '다음 단계 어떻게 하는지 알려주세요',
    '사용 방법 모르겠어요',
    '기계 글자 설명해줘',
    '기계 사용 방법',
    '음성인식 기능에 뭐가 있나요',
    '이거 어떻게 사용하는건가요',
    #수량 변경
    '콜라 2개로',
    '햄버거 3개로',
    '개수 바꿀게요',
    '숫자 변경',
    '개수 변경할게요',
    '지금 수량 변경',
    '이거 갯수 바꿀수 있나요',
    '주문 수량 변경',
    '갯수 추가 변경',
    '수량 변경'
])
y_data = np.array([0, 0, 0 , 0 ,0 ,0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 3, 3, 3, 3,3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5 ,5, 5, 5, 5, 5, 5, 6, 6 ,6 ,6 ,6 ,6, 6, 6, 6, 6, 7,7,7,7,7 ,7,7,7,7,7,8 ,8 ,8 ,8 ,8 ,8, 8,8,8,8,9,9,9,9,9,9,9,9,9,9])

labels = ['계산 인텐트', '주문 인텐트', '햄버거 메뉴 안내 인텐트','음료 메뉴 안내 인텐트','매장/포장 인텐트','주문취소 인텐트','상품 변경 인텐트','포인트 적립 인텐트','음성인식/키오스크 사용방법 인텐트','수량 변경 인텐트']

#MutinomailNB,TF-IDF 모듈 호출
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
import pickle
from sklearn.naive_bayes import MultinomialNB
import os

#전처리하기
x_data = clean_words(x_data) 
#TF-IDF 적용
transformer = TfidfVectorizer()
transformer.fit(x_data)
#단어 카운트 가중치 적용
x_data = transformer.transform(x_data) 

x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.3, random_state=777, stratify=y_data)

print(x_data)

if not os.path.exists('models/kiosk_order_chat_bot_model'):
    os.makedirs('models/kiosk_order_chat_bot_model')

with open('models/kiosk_order_chat_bot_model/transformer.pkl', 'wb') as f:
    pickle.dump(transformer, f)

#MutinomialNB 모델 적용
model = MultinomialNB(alpha=0.01) #smoothing
model.fit(x_train, y_train)
print(model.score(x_train, y_train))

print(model.score(x_test, y_test))

with open('models/kiosk_order_chat_bot_model/model.pkl', 'wb') as f:
    pickle.dump(model, f)

#의도 파악
def Intent(text):
    x_test = np.array([
        text
    ])
    #전처리
    x_test = clean_words(x_test) 
    #단어 카운트 가중치:tfidfvectorizer
    x_test = transformer.transform(x_test) 
    #예측하기
    y_predict = model.predict(x_test)
    #클래스 라벨
    label = labels[y_predict[0]]
    y_predict = model.predict_proba(x_test)
    #신뢰도
    confidence = y_predict[0][y_predict[0].argmax()]

    return '{} {:.2f}%'.format(label, confidence * 100)

#코드 확인 

x_test = np.array([
        '카드 결제'
    ])
x_test = clean_words(x_test) 
#단어 카운트 가중치:tfidfvectorizer
x_test = transformer.transform(x_test) 
y_predict = model.predict(x_test)
label = labels[y_predict[0]]
y_predict = model.predict_proba(x_test)
confidence = y_predict[0][y_predict[0].argmax()]

print(label, confidence)

#에제 적용하기
#기타 모델과 병렬 시행 및 모델 별 가중치 부여를 통해 신뢰도 향상 필요

#예제문장 1: '주문이요'
Intent('주문이요')

#예제문장 2: '햄버거 정보 알려주세요'
Intent('햄버거 정보 알려주세요')

#예제문장 3:'카드 결제 해주세요'
Intent('카드 결제 해주세요')

#예제문장 4:'키오스크 사용방법 알려주세요'
Intent("키오스크 사용방법 알려주세요")

#예제문장 4:'포인트 적립할게요'
Intent('포인트 적립할게요')

#예제문장 4:'포인트 적립할게요'
Intent('기계 글자 설명해줘')

#챗봇 대화(의도만 출력) 

print('인공지능 챗봇')
print('인공지능 챗봇과 대화를 합니다.')

while True:
    text = input('나: ')
    if text == 'quit':
        break

    print('챗봇:', Intent(text))

